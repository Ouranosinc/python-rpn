#!/bin/bash

## Check that the user is sourcing this script
_script_name=".setenv.dot"
if [[ "${0##*/}" == ${_script_name} ]] ; then
   cat 1>&2 <<EOF
ERROR: This script should be sourced with:
       source ${0}
EOF
    return 1
fi
unset _script_name

if [[ ${BASH_SOURCE#/} == ${BASH_SOURCE} ]] ; then
   __scriptpath=$(pwd)/${BASH_SOURCE%/*}
else
   __scriptpath=${BASH_SOURCE%/*}
fi
__scriptpath=${__scriptpath%/.}

__DESC='Load package dependencies'
__USAGE="USAGE: ${MYSELF} [-v] [-f] [--cmc|--science]"

__usage_long() {
   __toto=$(echo -e ${__USAGE})
   more <<EOF
${__DESC}

${__toto}

Options:
    -h, --help         : print this help
    -v, --verbose      : verbose mode
    -e, --external     : only load external dependencies
        --dev          : fully load exernal deps for development
        --cmc          : set dependencies for CMC network
        --science      : set dependencies for Sience network
EOF
   unset __toto
}

if [[ -d /ssm/net ]] ; then
   export RDENETWORK=${RDENETWORK:-'cmc'}
elif [[ -d /fs/ssm ]] ; then
   export RDENETWORK=${RDENETWORK:-'science'}
fi

__verbose=0
__external=0
_rpnpy_dev_mode_=""
while [[ $# -gt 0 ]] ; do
   case $1 in
      (-h|--help) __usage_long; exit 0;;
      (-v|--verbose) ((__verbose=__verbose+1));;
      (--dev) _rpnpy_dev_mode_="$1" ;;
      (-e|--external) __external=1; _rpnpy_dev_mode_="1";;
      (--cmc) export RDENETWORK=cmc ;;
      (--science) export RDENETWORK=science ;;
      (savehist*) ;;
      # (*) if [[ x$1 != x ]] ; then myerror "Option Not recognized: $1";fi;;
      # (*) COMP_ARCH=${1:-${COMP_ARCH_DEFAULT}} ;;
      (*) echo "WARNING: ignoring '$1'"
    esac
    shift
done

#=== Simulate installed bndl loading of external dep
for __bndlname in DEPENDENCIES.external.bndl DEPENDENCIES.external.${RDENETWORK}.bndl ; do
   if [[ -f ${__bndlname} ]] ; then
      echo "+ . \${${__scriptpath##*/}}/${__bndlname}"
      . r.load.dot $(cat ${__bndlname})
   fi
done
__bndlname=DEPENDENCIES.mig.bndl
if [[ -f ${__bndlname} ]] ; then
   echo "+ . \${${__scriptpath##*/}}/${__bndlname}"
   . r.load.dot $(cat ${__bndlname})
fi

./bin/.rpy.mk.version

if [[ x${ATM_MODEL_DFILES} == x ]] ; then
   for __item in /fs/homeu2/eccc/mrd/ords/rpnatm/sgem000/model_data/latest /fs/ssm/eccc/mrd/rpn/MIG/GEM/d/gem-data/gem-data_4.2.0/gem-data_4.2.0_all/share/data/dfiles /home/ordenv/ssm-domains9/release/gem-data_4.2.0/gem-data_4.2.0_all/share/data/dfiles ; do
      if [[ -d ${__item} ]] ; then
         export ATM_MODEL_DFILES=${ATM_MODEL_DFILES:-${__item}}
      fi
   done
fi

#=== Simulate installed bndl post loading
if [[ -f ${__scriptpath}/VERSION ]] ; then
   rpnpy_version0="$(cat ${__scriptpath}/VERSION)"
fi
. ${__scriptpath}/bin/.env_setup.dot rpnpy ${rpnpy_version:-${rpnpy_version0#*/}} all ${__scriptpath} ${__scriptpath}

export PYVERSION="$(python -V 2>&1 | cut -d' ' -f2 | cut -d'.' -f1-2)"

#====

unset __DESC __USAGE __usage_long __verbose __external __item __bndlname __scriptpath _rpnpy_dev_mode_
