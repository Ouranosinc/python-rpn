!--------------------------------------------------------------------------
! This is free software, you can use/redistribute/modify it under the terms of
! the EC-RPN License v2 or any later version found (if not provided) at:
! - http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
! - EC-RPN License, 2121 TransCanada, suite 500, Dorval (Qc), CANADA, H9P 1J3
! - service.rpn@ec.gc.ca
! It is distributed WITHOUT ANY WARRANTY of FITNESS FOR ANY PARTICULAR PURPOSE.
!-------------------------------------------------------------------------- 
!/**
#include "jim_grid_mod.hf"

!/**
function jim_xch_halo_nompi_2d_r4(nijh,F_fld1) result(F_istat)
   implicit none
   !@objective Halo Xchange for the Icosahedral-based grid
   !@arguments
   integer :: nijh
   real    :: F_fld1(1-JIM_HALOXY:nijh-JIM_HALOXY,1-JIM_HALOXY:nijh-JIM_HALOXY,0:JIM_NGRIDS-1) !(minxy:maxxy,minxy:maxxy,0:9)
   !@return
   integer :: F_istat 
   !@author  Stephane Chamberland, 2009-09
   !@revisions
   !**/
   integer :: minxy2,maxxy2,igrid,ij,hij,sij,sgrid,nij
   integer,external :: jim_xch_halo_nompi_3d_r4
   !---------------------------------------------------------------------
   F_istat = jim_xch_halo_nompi_3d_r4(nijh,1,F_fld1)
   !---------------------------------------------------------------------
   return
end function jim_xch_halo_nompi_2d_r4


!/**
function jim_xch_halo_nompi_3d_r4(nijh,nk,F_fld1) result(F_istat)
   implicit none
   !@objective Halo Xchange for the Icosahedral-based grid
   !@arguments
   integer :: nijh,nk
   real    :: F_fld1(1-JIM_HALOXY:nijh-JIM_HALOXY,1-JIM_HALOXY:nijh-JIM_HALOXY,nk,0:JIM_NGRIDS-1) !(minxy:maxxy,minxy:maxxy,nk,0:9)
   !@return
   integer :: F_istat 
   !@author  Stephane Chamberland, 2009-09
   !@revisions
   !**/
   integer :: minxy2,maxxy2,igrid,ij,hij,sij,sgrid,nij
   !---------------------------------------------------------------------
   !TODO: Error if minxy:maxxy < 1-HALOXY:nij+HALOXY
   nij    = nijh-2*JIM_HALOXY
   minxy2 = 1-JIM_HALOXY
   maxxy2 = nij+JIM_HALOXY
   F_istat = 1

   do igrid = 0,JIM_NGRIDS-1
      if (JIM_IS_NGRID(igrid)) then
         do ij=1,nij
            !S [N of igrid-1]
            hij   = 0
            sij   = nij
            sgrid = igrid-1
            if (sgrid<0)           sgrid = sgrid + JIM_NGRIDS
            F_fld1(ij,hij,:,igrid) = F_fld1(ij,sij,:,sgrid)
            !E [W of igrid+1]
            hij   = nij+1
            sij   = 1
            sgrid = igrid+1
            if (sgrid>=JIM_NGRIDS) sgrid = sgrid - JIM_NGRIDS
            F_fld1(hij,ij,:,igrid) = F_fld1(sij,ij,:,sgrid)
            !N [W of igrid+2] swap axes dir, shift i+1
            hij   = nij+1
            sij   = 1
            sgrid = igrid+2
            if (sgrid>=JIM_NGRIDS) sgrid = sgrid - JIM_NGRIDS
            F_fld1(ij+1,hij,:,igrid) = F_fld1(sij,nij-ij+1,:,sgrid)
            !W [N of igrid-2] swap axes dir
            hij   = 0
            sij   = nij
            sgrid = igrid-2
            if (sgrid<0)           sgrid = sgrid + JIM_NGRIDS
            F_fld1(hij,ij,:,igrid) = F_fld1(nij-ij+1,sij,:,sgrid)
         enddo
         !N-Pole
         F_fld1(1,nij+1,:,igrid) = F_fld1(1,nij+1,:,JIM_NHEMI)
      else
         do ij=1,nij
            !N [S of igrid+1]
            hij   = nij+1
            sij   = 1
            sgrid = igrid+1
            if (sgrid>=JIM_NGRIDS) sgrid = sgrid - JIM_NGRIDS
            F_fld1(ij,hij,:,igrid) = F_fld1(ij,sij,:,sgrid)
            !W [E of igrid-1]
            hij   = 0
            sij   = nij
            sgrid = igrid-1
            if (sgrid<0)           sgrid = sgrid + JIM_NGRIDS
            F_fld1(hij,ij,:,igrid) = F_fld1(sij,ij,:,sgrid)
            !S [E of igrid-2] swap axes dir
            hij   = 0
            sij   = nij
            sgrid = igrid-2
            if (sgrid<0)           sgrid = sgrid + JIM_NGRIDS
            F_fld1(ij,hij,:,igrid) = F_fld1(sij,nij-ij+1,:,sgrid)
            !E [S of igrid+2]  swap axes dir,shift j+1
            hij   = nij+1
            sij   = 1
            sgrid = igrid+2
            if (sgrid>=JIM_NGRIDS) sgrid = sgrid - JIM_NGRIDS
            F_fld1(hij,ij+1,:,igrid) = F_fld1(nij-ij+1,sij,:,sgrid)
         enddo
         !S-Pole
         F_fld1(nij+1,1,:,igrid) = F_fld1(nij+1,1,:,JIM_SHEMI)
      endif
   enddo
   !N-Pole Halo
!  F_fld1(2,nij+1,:,JIM_NHEMI) = F_fld1(1,nij,:,JIM_NHEMI+2)
   F_fld1(2,nij+2,:,JIM_NHEMI) = F_fld1(1,nij,:,JIM_NHEMI+4)
   F_fld1(1,nij+2,:,JIM_NHEMI) = F_fld1(1,nij,:,JIM_NHEMI+6)
!  F_fld1(0,nij  ,:,JIM_NHEMI) = F_fld1(1,nij,:,JIM_NHEMI+8)
   !S-Pole Halo
!  F_fld1(nij+1,2,:,JIM_SHEMI) = F_fld1(nij,1,:,JIM_SHEMI+2)
   F_fld1(nij+2,2,:,JIM_SHEMI) = F_fld1(nij,1,:,JIM_SHEMI+4)
   F_fld1(nij+2,1,:,JIM_SHEMI) = F_fld1(nij,1,:,JIM_SHEMI+6)
!  F_fld1(nij  ,0,:,JIM_SHEMI) = F_fld1(nij,1,:,JIM_SHEMI+8)
   !---------------------------------------------------------------------
   return
end function jim_xch_halo_nompi_3d_r4


function jim_xch_halo_nompi_vect3d_8(nijh,F_fld1) result(F_istat)
   implicit none
   #include "../utils/rmnlib_basics.hf"
   !@objective Halo Xchange for the Icosahedral-based grid
   !@arguments
   integer :: nijh
   real(RDOUBLE) :: F_fld1(3,1-JIM_HALOXY:nijh-JIM_HALOXY,1-JIM_HALOXY:nijh-JIM_HALOXY,0:JIM_NGRIDS-1) !(3,minxy:maxxy,minxy:maxxy,0:9)
   !@return
   integer :: F_istat 
   !@author  Stephane Chamberland, 2009-09
   !@revisions
   !**/
   integer :: minxy2,maxxy2,igrid,ij,hij,sij,sgrid,nij
   !---------------------------------------------------------------------
   !TODO: Error if minxy:maxxy < 1-HALOXY:nij+HALOXY
   nij    = nijh-2*JIM_HALOXY
   minxy2 = 1-JIM_HALOXY
   maxxy2 = nij+JIM_HALOXY
   F_istat = 1

   do igrid = 0,JIM_NGRIDS-1
      if (JIM_IS_NGRID(igrid)) then
         do ij=1,nij
            !S [N of igrid-1]
            hij   = 0
            sij   = nij
            sgrid = igrid-1
            if (sgrid<0)           sgrid = sgrid + JIM_NGRIDS
            F_fld1(:,ij,hij,igrid) = F_fld1(:,ij,sij,sgrid)
            !E [W of igrid+1]
            hij   = nij+1
            sij   = 1
            sgrid = igrid+1
            if (sgrid>=JIM_NGRIDS) sgrid = sgrid - JIM_NGRIDS
            F_fld1(:,hij,ij,igrid) = F_fld1(:,sij,ij,sgrid)
            !N [W of igrid+2] swap axes dir, shift i+1
            hij   = nij+1
            sij   = 1
            sgrid = igrid+2
            if (sgrid>=JIM_NGRIDS) sgrid = sgrid - JIM_NGRIDS
            F_fld1(:,ij+1,hij,igrid) = F_fld1(:,sij,nij-ij+1,sgrid)
            !W [N of igrid-2] swap axes dir
            hij   = 0
            sij   = nij
            sgrid = igrid-2
            if (sgrid<0)           sgrid = sgrid + JIM_NGRIDS
            F_fld1(:,hij,ij,igrid) = F_fld1(:,nij-ij+1,sij,sgrid)
         enddo
         !N-Pole
         F_fld1(:,1,nij+1,igrid) = F_fld1(:,1,nij+1,JIM_NHEMI)
      else
         do ij=1,nij
            !N [S of igrid+1]
            hij   = nij+1
            sij   = 1
            sgrid = igrid+1
            if (sgrid>=JIM_NGRIDS) sgrid = sgrid - JIM_NGRIDS
            F_fld1(:,ij,hij,igrid) = F_fld1(:,ij,sij,sgrid)
            !W [E of igrid-1]
            hij   = 0
            sij   = nij
            sgrid = igrid-1
            if (sgrid<0)           sgrid = sgrid + JIM_NGRIDS
            F_fld1(:,hij,ij,igrid) = F_fld1(:,sij,ij,sgrid)
            !S [E of igrid-2] swap axes dir
            hij   = 0
            sij   = nij
            sgrid = igrid-2
            if (sgrid<0)           sgrid = sgrid + JIM_NGRIDS
            F_fld1(:,ij,hij,igrid) = F_fld1(:,sij,nij-ij+1,sgrid)
            !E [S of igrid+2] swap axes dir, shift j+1
            hij   = nij+1
            sij   = 1
            sgrid = igrid+2
            if (sgrid>=JIM_NGRIDS) sgrid = sgrid - JIM_NGRIDS
            F_fld1(:,hij,ij+1,igrid) = F_fld1(:,nij-ij+1,sij,sgrid)
         enddo
         !S-Pole
         F_fld1(:,nij+1,1,igrid) = F_fld1(:,nij+1,1,JIM_SHEMI)
      endif
   enddo
   !N-Pole Halo
!  F_fld1(:,2,nij+1,JIM_NHEMI) = F_fld1(:,1,nij,JIM_NHEMI+2)
   F_fld1(:,2,nij+2,JIM_NHEMI) = F_fld1(:,1,nij,JIM_NHEMI+4)
   F_fld1(:,1,nij+2,JIM_NHEMI) = F_fld1(:,1,nij,JIM_NHEMI+6)
!  F_fld1(:,0,nij  ,JIM_NHEMI) = F_fld1(:,1,nij,JIM_NHEMI+8)
   !S-Pole Halo
!  F_fld1(:,nij+1,2,JIM_SHEMI) = F_fld1(:,nij,1,JIM_SHEMI+2)
   F_fld1(:,nij+2,2,JIM_SHEMI) = F_fld1(:,nij,1,JIM_SHEMI+4)
   F_fld1(:,nij+2,1,JIM_SHEMI) = F_fld1(:,nij,1,JIM_SHEMI+6)
!  F_fld1(:,nij  ,0,JIM_SHEMI) = F_fld1(:,nij,1,JIM_SHEMI+8)
   !---------------------------------------------------------------------
   return
end function jim_xch_halo_nompi_vect3d_8

