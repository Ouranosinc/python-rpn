#if !defined(_ICO_COMM_MACROS_)
#define _ICO_COMM_MACROS_

#define JIM_NGRIDS 10
#define JIM_HALOXY 2
#define JIM_NHEMI 0
#define JIM_SHEMI 1

#define JIM_NTYPES  4
#define JIM_HEXA  1
#define JIM_PENTA 2
#define JIM_NPOLE 3
#define JIM_SPOLE 4

#define JIM_PENTA_I 1
#define JIM_PENTA_J 1
#define JIM_NPOLE_I 1
#define JIM_NPOLE_J m_nij+1
#define JIM_SPOLE_I m_nij+1
#define JIM_SPOLE_J 1

#define JIM_PENTA_ICOL 0
#define JIM_PENTA_IROW 0
#define JIM_NPOLE_ICOL 0
#define JIM_NPOLE_IROW (m_nrow-1)
#define JIM_SPOLE_ICOL (m_ncol-1)
#define JIM_SPOLE_IROW 0


#define JIM_I 1
#define JIM_J 2
#define JIM_IS_PRESENT 3

#define JIM_NEDGES_MAX 6
#define JIM_NEDGES(T) JIM_DIJ(1,1,T)

#define JIM_EDGE_LEFT   -1
#define JIM_EDGE_CENTER  0
#define JIM_EDGE_RIGHT   1

#define JIM_IS_NGRID(IGRID) (mod(IGRID,2)==JIM_NHEMI)
#define JIM_IS_SGRID(IGRID) (mod(IGRID,2)==JIM_SHEMI)

#define JIM_SHARE_NPOLE(IGRID,ICOL,IROW) (JIM_IS_NGRID(IGRID) .and. ICOL==JIM_NPOLE_ICOL .and. IROW==JIM_NPOLE_IROW)
#define JIM_SHARE_SPOLE(IGRID,ICOL,IROW) (JIM_IS_SGRID(IGRID) .and. ICOL==JIM_SPOLE_ICOL .and. IROW==JIM_SPOLE_IROW)

#define JIM_HAS_PENTA(ICOL,IROW) (ICOL==JIM_PENTA_ICOL .and. IROW==JIM_PENTA_IROW)
#define JIM_HAS_NPOLE(IGRID,ICOL,IROW) (JIM_SHARE_NPOLE(IGRID,ICOL,IROW) .and. IGRID==JIM_NHEMI)
#define JIM_HAS_SPOLE(IGRID,ICOL,IROW) (JIM_SHARE_SPOLE(IGRID,ICOL,IROW) .and. IGRID==JIM_SHEMI)

#define JIM_IS_PENTA(II,JJ,ICOL,IROW) (JIM_HAS_PENTA(ICOL,IROW) .and. II==JIM_PENTA_I .and. JJ==JIM_PENTA_J)
#define JIM_IS_NPOLE(II,JJ,IGRID,ICOL,IROW) (JIM_HAS_NPOLE(IGRID,ICOL,IROW) .and. II==JIM_NPOLE_I .and. JJ==JIM_NPOLE_J)
#define JIM_IS_SPOLE(II,JJ,IGRID,ICOL,IROW) (JIM_HAS_SPOLE(IGRID,ICOL,IROW) .and. II==JIM_SPOLE_I .and. JJ==JIM_SPOLE_J)
#define JIM_IS_HEXA(II,JJ,IGRID,ICOL,IROW) (.not.(JIM_IS_PENTA(II,JJ,ICOL,IROW).or.JIM_IS_NPOLE(II,JJ,IGRID,ICOL,IROW).or.JIM_IS_SPOLE(II,JJ,IGRID,ICOL,IROW)))

!define JIM_DIJ_0 1
#define JIM_DIJ_0 2
!define JIM_NEXT_IJ(IJ,EDG,SID,TYP,IOJ) (IJ + JIM_DIJ(IOJ,1+EDG+SID,TYP))
!define JIM_NEXT_IJ_INDEX(IJ,EDG,SID,TYP,IOJ) IOJ,1+EDG+SID,TYP
#define JIM_NEXT_IJ(IJ,EDG,SID,TYP,IOJ) (IJ + JIM_DIJ(IOJ,JIM_DIJ_0+EDG+SID,TYP))
#define JIM_NEXT_IJ_INDEX(IJ,EDG,SID,TYP,IOJ) IOJ,JIM_DIJ_0+EDG+SID,TYP

#define EDGE_A(IEDGE) (IEDGE-1)*2+1
#define EDGE_B(IEDGE) (IEDGE-1)*2+2
#define EDGE_1(IEDGE) (IEDGE-1)*2+1
#define EDGE_2(IEDGE) (IEDGE-1)*2+2

!---------------------------------------------------------------------
! Arguments:
!   I,J,K : coor of the grid node ;; type: integer
!   T : grid node type;; use JIM_HEXA or JIM_PENTA or JIM_NPOLE or JIM_SPOLE ;; type: integer
!   E : edge number ;; type: integer [1..6]
!   XYZ: vector axe number;; use V_X or V_Y or V_Z ;; type: integer
! TODO: replace JIM_IE, JIM_JE by JIM_NEXT_IJ(...JIM_EDGE_CENTER...)

#define JIM_IE(I,E,T) (I+JIM_DIJ(JIM_I,E+JIM_DIJ_0,T))
#define JIM_JE(J,E,T) (J+JIM_DIJ(JIM_J,E+JIM_DIJ_0,T))
#define JIM_IJE(I,J,E,T) JIM_IE(I,E,T),JIM_JE(J,E,T)

#endif
